@inject NavigationManager Navigation

@using CommonLibrary.DataClasses.SeasonModel
@using CommonLibrary.DataClasses.SeriesModel
@rendermode InteractiveServer

<section class="flex flex-col gap-4 justify-center items-center overflow-hidden">
	<!--Episodes section-->
	<div class="flex gap-4 items-center py-2">
		<span>Episodes:</span>
		<div class="flex gap-2 flex-wrap">
			@for (var i = 1; i <= season.Episodes.Count; i++)
			{
				var episodeId = @season.Episodes[i - 1].Id;
				var episodeNumber = @season.Episodes[i - 1].EpisodeNumber;
				<button class="bg-black text-white px-3 py-1 rounded-lg" @onclick="() => setEpisode((episodeId, episodeNumber))">@i</button>
			}
		</div>
	</div>
</section>

@code {
	private string GetEpisodeUrl() => $"/series/{seriesId}?season={season.SeasonNumber}&episode={EpisodeId}";

	[Parameter]
	public SeasonGetDTO season { get; set; }

	[Parameter]
	public EventCallback<(int, int)> SelectEpisode { get; set; }

	public int EpisodeId { get; set; }

	[Parameter]
	public int seriesId { get; set; }

	private async Task setEpisode((int Id, int Number) episode)
	{
		EpisodeId = episode.Id;
		await SelectEpisode.InvokeAsync((episode.Id, episode.Number));
		StateHasChanged();
		Navigation.NavigateTo(GetEpisodeUrl());
	}
}
