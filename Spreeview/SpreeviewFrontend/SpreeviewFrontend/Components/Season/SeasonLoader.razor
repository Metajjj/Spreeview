@inject NavigationManager Navigation

@using CommonLibrary.DataClasses.SeasonModel
@using CommonLibrary.DataClasses.SeriesModel
@using SpreeviewFrontend.Services.ApiSeason
@inject IApiSeasonService SeasonService
@rendermode InteractiveServer

@if (season != null)
{
    @if (LoadingType == LoadingType.SeasonInfo)
    {
        <SeasonInfo season="season" SelectEpisode="SelectEpisode" seriesId="@SeriesId" />
    }
}
else if (errorMessage != null)
{
    <div>
        We faced an error when loading the season: @errorMessage
    </div>
}
else
{
    <div>
        Loading Season...
    </div>
}

@code {
    [Parameter]
    public LoadingType LoadingType { get; set; }

    [Parameter]
    public int SeriesId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int SeasonNumber { get; set; }

    [Parameter]
    public EventCallback<(int, int)> SelectEpisode { get; set; }

    private SeasonGetDTO season;

    private string errorMessage { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("Ran");

        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("season", out var seasonNumber))
        {
            SeasonNumber = Int32.Parse(seasonNumber);
        }
        
        // TODO: refactor this to handle errors using the ServiceObjectResponse instead of try catch
        try
        {
            Console.WriteLine("Paramaters set");
            Console.WriteLine(SeasonNumber);
            Console.WriteLine(SeriesId);
            season = (await SeasonService.GetSeasonById(SeriesId, SeasonNumber)).Value;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }

        StateHasChanged();
    }
}