@using CommonLibrary.DataClasses.SeriesModel
@inject NavigationManager NavManager

@if (series != null)
{
	<div class="relative w-full max-w-screen max-h-[500px] mx-auto overflow-hidden">

		<div class="flex w-full transition-transform duration-500 ease-in-out w-full" style="transform: translateX(@($"-{currentIndex * 100}%"))">
			@foreach (SeriesGetDTO series in series)
			{
				<img 
					src=@($"https://image.tmdb.org/t/p/w500{series.BannerPath}") 
					srcset=@($"https://image.tmdb.org/t/p/w500{series.BannerPath} 500w, https://image.tmdb.org/t/p/w780{series.BannerPath} 780w, https://image.tmdb.org/t/p/w1280{series.BannerPath} 1280w, https://image.tmdb.org/t/p/original{series.BannerPath} 1920w") 
					sizes="(max-width: 600px) 500px, (max-width: 1200px) 780px, 1280px" 
					class="w-full flex-shrink-0 object-cover" 
					alt="Banner Carousel" 
					@onclick="() => Redirect(series.Id)" 
				/>
			}
		</div>

		<div class="w-1/5 absolute left-0 top-0 h-full bg-gradient-to-r from-black/100 to-black/0 z-10"></div>
		<div class="w-1/5 absolute right-0 top-0 h-full bg-gradient-to-l from-black/100 to-black/0 z-10"></div>

		<button @onclick="Previous" class="absolute left-2 top-1/2 -translate-y-1/2 text-white z-20" id="left" aria-label="left">
			<svg xmlns="http://www.w3.org/2000/svg" class="w-[50px] h-[50px] sm:w-[100px] sm:h-[100px]" viewBox="0 0 24 24" fill="currentColor">
				<path d="M 11 9 C 12 8 10 7 9 8 L 6 11 C 5 12 5 12 6 13 l 3 3 C 10 17 12 16 11 15 l -1 -1 L 8 12 C 8 12 8 12 8 12 l 3 -3 z"/>
			</svg>
		</button>

		<button @onclick="Next" class="absolute right-2 top-1/2 -translate-y-1/2 text-white z-20" id="right" aria-label="right">
			<svg xmlns="http://www.w3.org/2000/svg" class="w-[50px] h-[50px] sm:w-[100px] sm:h-[100px]" viewBox="0 0 24 24" fill="currentColor">
				<path d="M 12 9 C 11 8 13 7 14 8 L 17 11 C 18 12 18 12 17 13 l -3 3 C 13 17 11 16 12 15 l 1 -1 L 15 12 C 15 12 15 12 15 12 l -3 -3 z"/>
			</svg>
		</button>

	</div>
}


@code {
	[Parameter]
	public List<SeriesGetDTO>? series { get; set; }

	private string errorMessage { get; set; }

	private int currentIndex = 0;

	private void Previous()
	{
		currentIndex = (currentIndex == 0) ? series.Count - 1 : currentIndex - 1;
	}

	private void Next()
	{
		currentIndex = (currentIndex == series.Count - 1) ? 0 : currentIndex + 1;
	}

	public void Redirect(int Id)
	{
		NavManager.NavigateTo($"/series/{Id}");
	}
}
