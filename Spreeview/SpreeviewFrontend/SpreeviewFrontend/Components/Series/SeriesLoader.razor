@using CommonLibrary.DataClasses.SeriesModel
@using SpreeviewFrontend.Components.HomeComponents
@using SpreeviewFrontend.Services.ApiSeries
@using SpreeviewFrontend.Components.Series
@inject IApiSeriesService SeriesService
@rendermode InteractiveServer

@if (trendingSeries != null || topRatedSeries != null)
{
    @if (LoadingType == LoadingType.Trending)
    {
        <PopularSeriesDisplay series="trendingSeries" LoadingType="LoadingType" />
    }
    else if (LoadingType == LoadingType.Carousel)
    {
        <MainCarousel series="trendingSeries" />
    } else if (LoadingType == LoadingType.TopRated)
    {
        <PopularSeriesDisplay series="topRatedSeries" LoadingType="LoadingType" />
    }
}
else if (errorMessage != null)
{
    <div class="load-message min-h-[500px] flex justify-center items-center">
        We faced an error when loading the series: @errorMessage
    </div>
}
else
{
    <div class="load-message min-h-[500px] flex justify-center items-center">
        <Spinner />
    </div>
}

@code {
    [Parameter]
    public LoadingType LoadingType { get; set; }

    private List<SeriesGetDTO> trendingSeries { get; set; }

    private List<SeriesGetDTO> topRatedSeries { get; set; }

    private string errorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // TODO: refactor this to handle errors using the ServiceObjectResponse instead of try catch
        if (LoadingType == LoadingType.Carousel || LoadingType == LoadingType.Trending)
        {
            try
            {
                trendingSeries = (await SeriesService.GetTrendingSeries()).Value;
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
        }
        else if (LoadingType == LoadingType.TopRated)
        {
            try
            {
                topRatedSeries = (await SeriesService.GetTopRatedSeries()).Value;
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
        }

    }
}