@inject NavigationManager Navigation

@using CommonLibrary.DataClasses.EpisodeModel
@using CommonLibrary.DataClasses.SeasonModel
@using CommonLibrary.DataClasses.SeriesModel
@using SpreeviewFrontend.Components.Reviews
@using SpreeviewFrontend.Requests
@rendermode InteractiveServer

@if (episode != null)
{
    <EpisodeInfo episode="@episode" />
    <ReviewLoader />
}
else if (errorMessage != null)
{
    <div class="load-message">
        We faced an error when loading the episode: @errorMessage
    </div>
}
else
{
    <div class="load-message">
        Loading Episode...
    </div>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int SeasonNumber { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int EpisodeId { get; set; }

    private EpisodeGetDTO episode;

    private string errorMessage { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("Ran");

        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("season", out var seasonNumber))
        {
            SeasonNumber = Int32.Parse(seasonNumber);
        }

        if (queryParams.TryGetValue("episode", out var episodeId))
        {
            EpisodeId = Int32.Parse(episodeId);
        }

        Backend backend = new Backend();
        try
        {
            Console.WriteLine("Paramaters set");
            episode = await backend.GetEpisodeById(episodeId);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }

        StateHasChanged();
    }
}