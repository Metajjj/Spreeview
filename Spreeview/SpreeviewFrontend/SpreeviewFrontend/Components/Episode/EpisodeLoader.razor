@inject NavigationManager Navigation

@using CommonLibrary.DataClasses.EpisodeModel
@using CommonLibrary.DataClasses.SeasonModel
@using CommonLibrary.DataClasses.SeriesModel
@using SpreeviewFrontend.Components.Reviews
@using SpreeviewFrontend.Services.ApiEpisode
@using SpreeviewFrontend.Components.Series
@inject IApiEpisodeService EpisodeService

@rendermode InteractiveServer

@if (episode != null)
{
    <EpisodeInfo episode="@episode" />
    <ReviewLoader episode="@episode" />
}
else if (errorMessage != null)
{
    <div class="load-message">
        We faced an error when loading the episode: @errorMessage
    </div>
}
else
{
    <div class="load-message">
        <Spinner />
    </div>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int SeasonNumber { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int EpisodeNumber { get; set; }

    [Parameter]
    public int seriesId { get; set; }

    private EpisodeGetDTO episode;

    private string errorMessage { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("Ran");

        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("season", out var seasonNumber))
        {
            SeasonNumber = Int32.Parse(seasonNumber);
        }

        if (queryParams.TryGetValue("episode", out var episodeNumber))
        {
            EpisodeNumber = Int32.Parse(episodeNumber);
        }

        try
        {
            Console.WriteLine("Paramaters set");
            Console.WriteLine(seriesId);
            Console.WriteLine(EpisodeNumber);
            Console.WriteLine(SeasonNumber);
            
            // TODO: refactor this to handle errors using the ServiceObjectResponse instead of try catch
            episode = (await EpisodeService.GetIndividualEpisode(seriesId, SeasonNumber, EpisodeNumber)).Value;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }

        StateHasChanged();
    }
}