@page "/chat"
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>

<div class="form-group">
    <label>
        User:
        <input @bind="_usernameInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="_messageInput" size="50" />
    </label>
</div>
<button @onclick="SendMessageAsync" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in _messages)
    {
        <li>@message</li>
    }
</ul>

@code {

    private HubConnection? _hubConnection; // the hub connection
    private List<string> _messages = []; // list of messages in chit
    private bool _isChatting = false; // whether the user is chatting or not
    private string? _usernameInput; // username
    private string? _messageInput; // message

    protected override async Task OnInitializedAsync()
    {
        // Setup a new HubConnection to chat hub
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chatHub"))
            .Build();

        // Register OnRecieveMessage method
        _hubConnection.On<string, string>("ReceiveMessage", OnRecieveMessageAsync);

        await _hubConnection.StartAsync();
    }

    // Executed anytime a message is recieved from the users in the hub
    private async Task OnRecieveMessageAsync(string user, string message)
    {
        var encodedMessage = $"{user}: {message}";
        _messages.Add(encodedMessage);
        await InvokeAsync(StateHasChanged);
    }

    private async Task SendMessageAsync()
    {
        // If hub connection exists
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("SendMessage", _usernameInput, _messageInput);
        }
    }
    
    public bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;    

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
