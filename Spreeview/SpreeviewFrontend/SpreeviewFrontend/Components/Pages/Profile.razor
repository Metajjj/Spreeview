@page "/profile"
@using CommonLibrary.DataClasses.CommentModel
@using CommonLibrary.DataClasses.ReviewModel
@using CommonLibrary.DataClasses.SeriesModel
@using SpreeviewFrontend.Services.ApiCommentService
@using SpreeviewFrontend.Services.ApiIdentity
@using SpreeviewFrontend.Services.ApiReview
@using SpreeviewFrontend.Services.ApiSeries
@rendermode InteractiveServer
@inject IApiIdentityService IdentityService
@inject IApiReviewService ReviewService
@inject IApiCommentService CommentService
@inject IApiSeriesService SeriesService
<AuthorizeView>

    <PageTitle>User Profile</PageTitle>

    <div class="max-w-4xl p-6 m-auto mt-2 bg-white rounded-lg">

        <!-- Profile Header -->
        <div class="flex items-center space-x-6">
            <div>
                <div class="w-10 h-10 flex-row rounded-full bg-gray-500"></div>
                <h2 class="text-2xl font-bold">@context.User.Identity?.Name</h2>
            </div>
        </div>

        <!-- Recent Reviews -->
        <div class="flex mt-8 gap-4 sm:flex-row flex-col">
            <div class="flex-1 bg-white p-4 rounded shadow-md">
                <h3 class="text-xl font-semibold">Recent Reviews</h3>
                @if (Reviews != null && Reviews.Any())
                {
                    <ul class="space-y-4 mt-4">
                        @foreach (var review in Reviews)
                        {
                            var seriesName = Task.Run(() => GetSeriesAsync(review.SeriesId)).Result.Name;
                            var season = review.SeasonNumber;
                            var episode = review.EpisodeNumber;
                            if (episode == 0) episode = 1;
                            if (season == 0) season = 1;

                            var seriesPath = $"/series/{review.SeriesId}";
                            var episodePath = $"{seriesPath}?season={review.SeasonNumber}&episode={review.EpisodeNumber}";
                            <li class="bg-gray-100 p-4 rounded-lg shadow-md">
                                <p class="text-sm text-gray-600"><NavLink href="@seriesPath">@seriesName</NavLink></p>
                                <p class="text-sm text-gray-600"><NavLink href="@episodePath">[Season @season, Episode @episode]</NavLink></p>
                                <p class="text-sm text-gray-600">Rating: @review.Rating</p>
                                <p class="mt-2">@review.Contents</p>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="mt-4 text-gray-500">No recent reviews found.</p>
                }
            </div>
            <div class="flex-1 bg-white p-4 rounded shadow-md">
                <h3 class="text-xl font-semibold">Recent Comments</h3>
                @if (Comments != null && Comments.Any())
                {
                    <ul class="space-y-4 mt-4">
                        @foreach (var comment in Comments)
                        {
                            var seriesName = Task.Run(() => GetSeriesAsync(comment.SeriesId)).Result.Name;
                            var season = comment.SeasonNumber;
                            var episode = comment.EpisodeNumber;
                            if (episode == 0) episode = 1;
                            if (season == 0) season = 1;
                            var seriesPath = $"/series/{comment.SeriesId}";
                            var episodePath = $"{seriesPath}?season={comment.SeasonNumber}&episode={comment.EpisodeNumber}";
                            <li class="bg-gray-100 p-4 rounded-lg shadow-md">
                                <p class="text-sm text-gray-600">On post: <NavLink href="@episodePath"><span class="font-medium">@comment.DateAdded</span></NavLink></p>
                                <p class="text-sm text-gray-600"><NavLink href="@seriesPath">@seriesName</NavLink></p>
                                <p class="text-sm text-gray-600"><NavLink href="@episodePath">[Season @season, Episode @episode]</NavLink></p>
                                <p class="mt-2">@comment.Contents</p>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="mt-4 text-gray-500">No recent comments found.</p>
                }
            </div>
        </div>
    
        <!-- Recent Comments -->
    </div>
</AuthorizeView>

@code {
    public int UserId { get; set; }

    private List<ReviewGetDTO> Reviews { get; set; }
    
    private List<CommentGetDTO> Comments { get; set; }

    private async Task<SeriesGetDTO> GetSeriesAsync(int id)
    {
        return SeriesService.GetSeriesById(id).Result.Value;
    }
    
    private async Task<int> GetUserId()
    {
        return await IdentityService.GetUserIdAsync();
    }
    
    protected override async Task OnInitializedAsync()
    {
        UserId = await GetUserId();
        Reviews = (await ReviewService.GetReviewsByUserId(UserId)).Value;
        Comments = (await CommentService.GetCommentsByUserId(UserId)).Value;
        Comments.Reverse();
        Reviews.Reverse();
        StateHasChanged();
    }
}
