@page "/profile"
@using CommonLibrary.DataClasses.CommentModel
@using CommonLibrary.DataClasses.ReviewModel
@using CommonLibrary.DataClasses.SeriesModel
@using SpreeviewFrontend.Services.ApiCommentService
@using SpreeviewFrontend.Services.ApiIdentity
@using SpreeviewFrontend.Services.ApiReview
@using SpreeviewFrontend.Services.ApiSeries
@rendermode InteractiveServer
@inject IApiIdentityService IdentityService
@inject IApiReviewService ReviewService
@inject IApiCommentService CommentService
@inject IApiSeriesService SeriesService
<AuthorizeView>

    <PageTitle>User Profile</PageTitle>

    <div class="max-w-4xl p-6 m-auto mt-2 bg-white rounded-lg">

        <!-- Profile Header -->
        <div class="flex items-center space-x-6">
            <div class="flex gap-2 items-center">
                <div class="w-10 h-10 rounded-full bg-purple-600">
                    <svg viewBox="0 0 512 512" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <title>user-profile-filled</title> <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g id="drop" fill="#ffffff" transform="translate(42.666667, 42.666667)"> <path d="M213.333333,3.55271368e-14 C269.912851,3.55271368e-14 324.175019,22.4761259 364.18278,62.4838867 C404.190541,102.491647 426.666667,156.753816 426.666667,213.333333 C426.666667,331.15408 331.15408,426.666667 213.333333,426.666667 C95.5125867,426.666667 2.84217094e-14,331.15408 2.84217094e-14,213.333333 C2.84217094e-14,95.5125867 95.5125867,3.55271368e-14 213.333333,3.55271368e-14 Z M234.666667,234.666667 L192,234.666667 C139.18529,234.666667 93.8415802,266.653822 74.285337,312.314895 C105.229171,355.70638 155.977088,384 213.333333,384 C270.689579,384 321.437496,355.70638 352.381644,312.31198 C332.825087,266.653822 287.481377,234.666667 234.666667,234.666667 L234.666667,234.666667 Z M213.333333,64 C177.987109,64 149.333333,92.653776 149.333333,128 C149.333333,163.346224 177.987109,192 213.333333,192 C248.679557,192 277.333333,163.346224 277.333333,128 C277.333333,92.653776 248.679557,64 213.333333,64 Z" id="Combined-Shape"> </path> </g> </g> </g></svg>
                </div>
                <h2 class="text-2xl font-bold">@context.User.Identity?.Name</h2>
            </div>
        </div>

        <!-- Recent Reviews -->
        <div class="flex mt-8 gap-4 sm:flex-row flex-col">
            <div class="flex-1 bg-white p-4 rounded shadow-md">
                <h3 class="text-xl font-semibold">Recent Reviews</h3>
                @if (Reviews != null && Reviews.Any())
                {
                    <ul class="space-y-4 mt-4 overflow-y-auto max-h-[600px]">
                        @foreach (var review in Reviews)
                        {
                            var seriesName = Task.Run(() => GetSeriesAsync(review.SeriesId)).Result.Name;
                            var season = review.SeasonNumber;
                            var episode = review.EpisodeNumber;
                            if (episode == 0) episode = 1;
                            if (season == 0) season = 1;

                            var seriesPath = $"/series/{review.SeriesId}";
                            var episodePath = $"{seriesPath}?season={review.SeasonNumber}&episode={review.EpisodeNumber}";
                            <li class="bg-gray-100 p-4 rounded-lg shadow-md">
                                <p class="text-sm text-gray-600"><NavLink href="@seriesPath">@seriesName</NavLink></p>
                                <p class="text-sm text-gray-600"><NavLink href="@episodePath">[Season @season, Episode @episode]</NavLink></p>
                                <p class="text-sm text-gray-600">Rating: @review.Rating</p>
                                <p class="mt-2">@review.Contents</p>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="mt-4 text-gray-500">No recent reviews found.</p>
                }
            </div>
            <div class="flex-1 bg-white p-4 rounded shadow-md">
                <h3 class="text-xl font-semibold">Recent Comments</h3>
                @if (Comments != null && Comments.Any())
                {
                    <ul class="space-y-4 mt-4 overflow-y-auto max-h-[600px]">
                        @foreach (var comment in Comments)
                        {
                            var seriesName = Task.Run(() => GetSeriesAsync(comment.SeriesId)).Result.Name;
                            var season = comment.SeasonNumber;
                            var episode = comment.EpisodeNumber;
                            if (episode == 0) episode = 1;
                            if (season == 0) season = 1;
                            var seriesPath = $"/series/{comment.SeriesId}";
                            var episodePath = $"{seriesPath}?season={comment.SeasonNumber}&episode={comment.EpisodeNumber}";
                            <li class="bg-gray-100 p-4 rounded-lg shadow-md">
                                <p class="text-sm text-gray-600">On post: <NavLink href="@episodePath"><span class="font-medium">@comment.DateAdded</span></NavLink></p>
                                <p class="text-sm text-gray-600"><NavLink href="@seriesPath">@seriesName</NavLink></p>
                                <p class="text-sm text-gray-600"><NavLink href="@episodePath">[Season @season, Episode @episode]</NavLink></p>
                                <p class="mt-2">@comment.Contents</p>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="mt-4 text-gray-500">No recent comments found.</p>
                }
            </div>
        </div>
    
        <!-- Recent Comments -->
    </div>
</AuthorizeView>

@code {
    public int UserId { get; set; }

    private List<ReviewGetDTO> Reviews { get; set; }
    
    private List<CommentGetDTO> Comments { get; set; }

    private async Task<SeriesGetDTO> GetSeriesAsync(int id)
    {
        return SeriesService.GetSeriesById(id).Result.Value;
    }
    
    private async Task<int> GetUserId()
    {
        return (await IdentityService.GetUserIdAsync()).Value;
    }
    
    protected override async Task OnInitializedAsync()
    {
        UserId = await GetUserId();
        Reviews = (await ReviewService.GetReviewsByUserId(UserId)).Value;
        Comments = (await CommentService.GetCommentsByUserId(UserId)).Value;

        if (Comments != null) Comments.Reverse();
        if (Reviews != null) Reviews.Reverse();
        StateHasChanged();
    }
}
